#!/usr/bin/env python3
"""Script de teste para validar a classifica√ß√£o h√≠brida do Neoson."""

import asyncio
import os
import sys

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from neoson import Neoson


async def testar_classificacao():
    """Testa a nova l√≥gica de classifica√ß√£o h√≠brida."""
    print("üöÄ === TESTE DA CLASSIFICA√á√ÉO H√çBRIDA NEOSON ===\n")
    
    # Inicializar Neoson
    neoson = Neoson()
    sucesso = await neoson.inicializar()
    
    if not sucesso:
        print("‚ùå Falha ao inicializar Neoson")
        return False
    
    print("‚úÖ Neoson inicializado com sucesso!\n")
    
    # Casos de teste
    casos_teste = [
        # Casos √≥bvios que devem ser resolvidos por keywords
        ("Como solicitar f√©rias?", "rh"),
        ("Preciso resetar minha senha", "ti"),
        ("Qual o benef√≠cio m√©dico?", "rh"),
        ("Problema com VPN", "ti"),
        
        # Casos sem√¢nticos que precisam de embeddings
        ("Quero trabalhar remotamente", "rh"),  # home office
        ("Meu computador est√° lento", "ti"),    # performance
        ("Processo de avalia√ß√£o de performance", "rh"),  # RH
        ("Como fazer backup dos meus dados", "ti"),      # TI
        
        # Casos amb√≠guos
        ("Como funciona o sistema de ponto?", "rh"),  # Pode ser RH ou TI
        ("Pol√≠tica de uso de equipamentos", "ti"),    # Pode ser RH ou TI
        
        # Casos que devem ir para geral
        ("Qual o hor√°rio da cantina?", "geral"),
        ("Como est√° o tempo hoje?", "geral"),
    ]
    
    print("üìã Executando casos de teste:\n")
    
    acertos = 0
    total = len(casos_teste)
    
    for i, (pergunta, esperado) in enumerate(casos_teste, 1):
        print(f"üîç Teste {i}/{total}: {pergunta}")
        resultado = neoson.classificar_pergunta(pergunta)
        
        status = "‚úÖ" if resultado == esperado else "‚ùå"
        print(f"{status} Resultado: {resultado.upper()} (esperado: {esperado.upper()})")
        
        if resultado == esperado:
            acertos += 1
        
        print("-" * 60)
    
    # Relat√≥rio final
    taxa_acerto = (acertos / total) * 100
    print("\nüìä RELAT√ìRIO FINAL:")
    print(f"   Acertos: {acertos}/{total} ({taxa_acerto:.1f}%)")
    
    if taxa_acerto >= 80:
        print("üéâ Classifica√ß√£o h√≠brida funcionando bem!")
    elif taxa_acerto >= 60:
        print("‚ö†Ô∏è Classifica√ß√£o precisa de ajustes nos thresholds")
    else:
        print("‚ùå Classifica√ß√£o precisa de revis√£o significativa")
    
    return taxa_acerto >= 80


if __name__ == "__main__":
    try:
        sucesso = asyncio.run(testar_classificacao())
        sys.exit(0 if sucesso else 1)
    except Exception as e:
        print(f"‚ùå Erro durante teste: {e}")
        sys.exit(1)